/*********************************
	'Snail'-puzzel
	Door 
	Jarrit Boons
	Cédric Gullentops

	Regels:
		-Spiraal in sequentie (1,2,3)
		-Eerste cijfer altijd 1
		-Laatste cijfer altijd 3
		-Elke rij telkens (1,2,3)
		-Elke kolom telkens (1,2,3)
		-Lege vakjes zijn toegestaan
*********************************/

vocabulary V {

	
    type Rij 	isa int		 
	type Kolom 	isa int	 
	type Getal	isa int
    type Vakje	isa	int
    type Index	isa int
    GegevenT(Rij,Kolom,Getal) 
    NaarVakje(Rij,Kolom):Vakje
    OplossingTabel(Rij,Kolom,Getal)
    OplossingVakje(Vakje,Getal)
    GeordendOpl()
    

}
structure S : V {
    Getal = {1..3}								
    Rij = {1..5}
    Kolom = {1..5}
    Vakje = {1..25}
    Index = {1..15}
	//Zet rij en kolom om naar een vaknr
    NaarVakje = {1,1->1;1,2->2;1,3->3;1,4->4;1,5->5;2,5->6;3,5->7;4,5->8
    				;5,5->9;5,4->10;5,3->11;5,2->12;5,1->13;4,1->14;3,1->15
        			;2,1->16;2,2->17;2,3->18;2,4->19;3,4->20;4,4->21;4,3->22
        			;4,2->23;3,2->24;3,3->25;
    			}
    
	//Vul gegeven waarden in
    GegevenT = {(1,2,1);(3,3,3);(3,5,2);(5,2,2);(5,4,3);}
    
    
    
}
theory T : V {
    //Max één getal per vakje
    
    !r,k:2>#{g:OplossingTabel(r,k,g)}.
    !v:2>#{g:OplossingVakje(v,g)}.
    
    !r,k,v,g:OplossingTabel(r,k,g)&v = NaarVakje(r,k)=>OplossingVakje(v,g).
    !r,k,v,g:OplossingVakje(v,g)&v = NaarVakje(r,k)=>OplossingTabel(r,k,g).
    
    //De gegevens maken deel uit van de oplossing
	!r,k,g:GegevenT(r,k,g)=>OplossingTabel(r,k,g).	
    
    //Elke rij bevat exact één 1, 2 en 3 
    !k,g:#{r:OplossingTabel(r,k,g)}=1.
    
    //Elke rij bevat exact één 1, 2 en 3 
    !r,g:#{k:OplossingTabel(r,k,g)}=1.											
    
    //
    Oplossing(v,g)<= ?i:(i,v,g).

}

procedure main(){
    stdoptions.nbmodels = 1
    printmodels(modelexpand(T,S))
}

